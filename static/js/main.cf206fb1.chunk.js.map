{"version":3,"sources":["state/geoLocation/types.ts","components/Pin.tsx","components/Pins.tsx","containers/MapContainer.tsx","state/geoLocation/reducer.ts","hoc/withGeolocationAvailable.tsx","hoc/withOnlyMobileAndTablet.tsx","components/DataView.tsx","components/ErrorDialog.tsx","App.tsx","hooks/useInterval.ts","serviceWorker.ts","index.tsx"],"names":["GeoLocationActions","GeoLocationErrorMessages","Pin","this","props","longitude","latitude","color","size","height","viewBox","style","cursor","fill","stroke","transform","d","PureComponent","Pins","data","map","item","id","key","MapContainer","state","viewport","initialLatitude","initialLongitude","zoom","width","onViewportChange","setState","mapboxApiAccessToken","initialGeoLocationState","timeInterval","isTracking","error","undefined","createNextId","length","geoLocationReducer","action","type","ADD_LOCALIZATION","payload","CLEAR_DATA","SET_TIME_INTERVAL","SET_IS_TRACKING","SET_ERROR","withGeolocationAvailable","Component","navigator","BROWSER_NO_SUPPORT","withOnlyMobileAndTablet","isMobile","isTablet","DataView","title","titleColor","measurementTime","className","Typography","variant","component","format","ErrorDialog","onClose","message","open","Dialog","DialogTitle","DialogContent","DialogActions","useReducer","geoLocation","dispatchGeoLocation","useState","rawDataView","toggleRawDataView","getCurrentPosition","geolocation","onGeolocateSuccess","onGeolocateError","enableHighAccuracy","position","coords","Date","timestamp","getGeolocateErrorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","DEFAULT","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","Container","align","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","name","inputProps","label","Button","onClick","overflowWrap","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"4NAyBYA,EA+BAC,E,iEA/BAD,K,oCAAAA,E,wBAAAA,E,sCAAAA,E,kCAAAA,E,oCAAAA,E,uBAAAA,M,cA+BAC,K,2IAAAA,E,0KAAAA,E,kHAAAA,E,wCAAAA,M,yDC5CSC,E,uKACT,IAAD,EACsCC,KAAKC,MAA1CC,EADD,EACCA,UAAWC,EADZ,EACYA,SAAUC,EADtB,EACsBA,MAAOC,EAD7B,EAC6BA,KAEpC,OACE,kBAAC,IAAD,CAAQH,UAAWA,EAAWC,SAAUA,GACtC,yBACEG,OAAQD,EACRE,QAAQ,YACRC,MAAO,CACLC,OAAQ,UACRC,KAAMN,EACNO,OAAQ,OACRC,UAAU,aAAD,QAAgBP,EAAO,EAAvB,eAA+BA,EAA/B,SAGX,0BAAMQ,EAzBN,kR,GASuBC,iBCJpBC,EAAb,uKAGI,OADiBf,KAAKC,MAAde,KACIC,KAAI,SAACC,GACf,OACE,kBAAC,EAAD,CACEf,SAAUe,EAAKf,SACfD,UAAWgB,EAAKhB,UAChBE,MAAmB,IAAZc,EAAKC,GAAW,MAAQ,OAC/Bd,KAAM,GACNe,IAAKF,EAAKC,YAVpB,GAA0BL,iBCsCXO,E,4MA1BbC,MAA0B,CACxBC,SAAU,CACRpB,SAAU,EAAKF,MAAMuB,gBACrBtB,UAAW,EAAKD,MAAMwB,iBACtBC,KAAM,EAAKzB,MAAMyB,O,uDAIX,IAAD,SACmB1B,KAAKC,MAAvB0B,EADD,EACCA,MAAOrB,EADR,EACQA,OACf,OACE,kBAAC,IAAD,iBACMN,KAAKsB,MAAMC,SADjB,CAEEK,iBAAkB,SAACL,GAAD,OAAc,EAAKM,SAAS,CAAEN,cAChDO,qBACE,2FAEFH,MAAOA,EACPrB,OAAQA,IAER,kBAAC,EAAD,CAAMU,KAAMhB,KAAKC,MAAMe,Y,GArBJF,iB,gBCZdiB,EAA6C,CACxDf,KAAM,GACNgB,aAAc,IACdC,YAAY,EACZC,WAAOC,GAGIC,EAAe,SAACpB,GAAD,OAC1BA,EAAKqB,OAASrB,EAAKA,EAAKqB,OAAS,GAAGlB,GAAK,EAAI,GAElCmB,EAAqB,WAGT,IAFvBhB,EAEsB,uDAFdS,EACRQ,EACsB,uCACtB,OAAQA,EAAOC,MACb,KAAK3C,EAAmB4C,iBACtB,OAAO,eACFnB,EADL,CAEEN,KAAK,GAAD,mBACCM,EAAMN,MADP,gBAEGuB,EAAOG,QAFV,CAEmBvB,GAAIiB,EAAad,EAAMN,UAE9CkB,WAAOC,EACPF,YAAY,IAEhB,KAAKpC,EAAmB8C,WACtB,OAAO,eAAKrB,EAAZ,CAAmBN,KAAM,KAC3B,KAAKnB,EAAmB+C,kBACtB,OAAO,eAAKtB,EAAZ,CAAmBU,aAAcO,EAAOG,UAC1C,KAAK7C,EAAmBgD,gBACtB,OAAO,eAAKvB,EAAZ,CAAmBW,WAAYM,EAAOG,UACxC,KAAK7C,EAAmBiD,UACtB,OAAO,eAAKxB,EAAZ,CAAmBY,MAAOK,EAAOG,QAAST,YAAY,IACxD,QACE,OAAOX,I,qDC7BEyB,EATkB,SAC/BC,GAD+B,OAEf,gBAAM/C,EAAN,0BAChB,gBAAiBgD,UACf,kBAACD,EAAe/C,GAEhB,2BAAIH,EAAyBoD,sB,QCGlBC,EATiB,SAC9BH,GAD8B,OAEd,gBAAM/C,EAAN,2BAChBmD,YAAYC,WACV,kBAACL,EAAe/C,GAEhB,6E,SCGiBqD,E,uKACT,IAAD,EAOHtD,KAAKC,MALPsD,EAFK,EAELA,MACAC,EAHK,EAGLA,WACArD,EAJK,EAILA,SACAD,EALK,EAKLA,UACAuD,EANK,EAMLA,gBAEF,OACE,yBAAKC,UAAU,oCACb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAIrD,MAAO,CAAEJ,MAAOoD,IACvDD,GAEH,kBAACI,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACpC,wCADF,IACoB1D,GAGpB,kBAACwD,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACpC,wCADF,KACqB3D,GAErB,kBAACyD,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACpC,+CAAwB,IACvBC,YAAOL,EAAiB,6B,GAvBG3C,iB,iCCuBvBiD,EAnBkC,SAAC,GAK3C,IAJLC,EAII,EAJJA,QACAT,EAGI,EAHJA,MACAU,EAEI,EAFJA,QACAC,EACI,EADJA,KAEA,OACE,kBAACC,EAAA,EAAD,CAAQD,KAAMA,EAAMF,QAASA,GAC3B,kBAACI,EAAA,EAAD,KAAcb,GACd,kBAACc,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnCI,IAGL,kBAACK,EAAA,EAAD,QCqJSnB,IAAwBJ,GAzJjB,WAAO,IAAD,EA+DC/B,EA/DD,EACiBuD,qBACzCjC,EACAP,GAHwB,mBACnByC,EADmB,KACNC,EADM,OAKeC,oBAAkB,GALjC,mBAKnBC,EALmB,KAKNC,EALM,KAsB1B,SAASC,IACP5B,UAAU6B,YAAYD,mBACpBE,EACAC,EACA,CACEC,oBAAoB,IAK1B,SAASF,EAAmBG,GAC1BT,EAAoB,CAClBjC,KAAM3C,EAAmB4C,iBACzBC,QAAS,CACPvB,GAAI,EACJhB,SAAU+E,EAASC,OAAOhF,SAC1BD,UAAWgF,EAASC,OAAOjF,UAC3BuD,gBAAiB,IAAI2B,KAAKF,EAASG,cAKzC,SAASL,EAAiB9C,GACxBuC,EAAoB,CAClBjC,KAAM3C,EAAmBiD,UACzBJ,QAAS,CACPe,gBAAiB,IAAI2B,KACrBnB,QAASqB,EAAyBpD,MAKxC,SAASoD,EAAyBpD,GAChC,OAAIA,EAAMqD,OAASrD,EAAMsD,kBAChB1F,EAAyB0F,kBACvBtD,EAAMqD,OAASrD,EAAMuD,qBACvB3F,EAAyB2F,qBAE3B3F,EAAyB4F,QAYlC,OChGyB,SAACC,EAAsBC,GAChD,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIzE,EAAK8E,aAJX,WACEJ,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMM,cAAc/E,OAE5B,CAACyE,IDiBJO,CACEtB,EACAL,EAAYvC,WAAauC,EAAYxC,aAAe,MAMtD+D,qBAAU,WACRlB,MACC,IAqDD,kBAACuB,EAAA,EAAD,KACE,kBAACzC,EAAA,EAAD,CAAY0C,MAAM,SAASzC,QAAQ,KAAKF,UAAU,oBAAlD,cAGCc,EAAYxD,KAAKqB,OAChB,oCACE,kBAAC,EAAD,CACErB,MAjBiBA,EAiBOwD,EAAYxD,KAhBxCA,EAAKqB,OAAS,EACT,CAACrB,EAAK,GAAIA,EAAKA,EAAKqB,OAAS,IACX,IAAhBrB,EAAKqB,OACP,CAACrB,EAAK,IAERA,GAYCQ,gBAAiBgD,EAAYxD,KAAK,GAAGb,SACrCsB,iBAAkB+C,EAAYxD,KAAK,GAAGd,UACtCwB,KAAM,GACNC,MAAM,OACNrB,OAAO,UAET,kBAACgG,EAAA,EAAD,CAAWC,KAAG,EAAC7C,UAAU,oBACvB,kBAAC8C,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASnC,EAAYvC,WACrB2E,SAAU,WACRnC,EAAoB,CAClBjC,KAAM3C,EAAmBgD,gBACzBH,SAAU8B,EAAYvC,cAG1B4E,KAAK,+BACLC,WAAY,CAAE,aAAc,oBAGhCC,MAAM,8BAGV,kBAAC,EAAD,CACExD,MAAM,oBACNC,WAAW,MACXrD,SAAUqE,EAAYxD,KAAK,GAAGb,SAC9BD,UAAWsE,EAAYxD,KAAK,GAAGd,UAC/BuD,gBAAiBe,EAAYxD,KAAK,GAAGyC,kBAEvC,kBAAC,EAAD,CACEF,MAAM,mBACNC,WAAW,OACXrD,SAAUqE,EAAYxD,KAAKwD,EAAYxD,KAAKqB,OAAS,GAAGlC,SACxDD,UAAWsE,EAAYxD,KAAKwD,EAAYxD,KAAKqB,OAAS,GAAGnC,UACzDuD,gBACEe,EAAYxD,KAAKwD,EAAYxD,KAAKqB,OAAS,GAAGoB,kBAGlD,kBAACuD,EAAA,EAAD,CACEpD,QAAQ,WACRxD,MAAM,UACNC,KAAK,QACL4G,QAAS,kBAAMrC,GAAmBD,KAEjCA,EAAc,qDAAqB,sDAEtC,yBAAKjB,UAAU,oBACZiB,EACC,kBAAChB,EAAA,EAAD,CAAYnD,MAAO,CAAE0G,aAAc,eAChCC,KAAKC,UAAU5C,EAAYxD,OAE5B,OAGN,KACJ,kBAAC,EAAD,CACEgD,QAAS,kBACPS,EAAoB,CAClBjC,KAAM3C,EAAmBiD,UACzBJ,aAASP,KAGb+B,OAAMM,EAAYtC,MAClBqB,MAAM,kBACNU,QAAO,UAAEO,EAAYtC,aAAd,aAAE,EAAmB+B,eEjKhBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmB7E,WACrBA,UAAU8E,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlG,GACLmG,QAAQnG,MAAMA,EAAM+B,c","file":"static/js/main.cf206fb1.chunk.js","sourcesContent":["export type PinT = {\n  latitude: number;\n  longitude: number;\n  color: string;\n};\n\nexport type GeoDataT = {\n  id: number;\n  latitude: number;\n  longitude: number;\n  measurementTime: Date;\n};\n\nexport type GeoErrorT = {\n  measurementTime: Date;\n  message: string;\n};\n\nexport type GeoLocationStateT = {\n  data: GeoDataT[];\n  timeInterval: number;\n  isTracking: boolean;\n  error?: GeoErrorT;\n};\n\nexport enum GeoLocationActions {\n  ADD_LOCALIZATION = \"ADD_LOCALIZATION\",\n  CLEAR_DATA = \"CLEAR_DATA\",\n  SET_TIME_INTERVAL = \"SET_TIME_INTERVAL\",\n  SET_IS_TRACKING = \"SET_IS_TRACKING\",\n  SET_IS_AVAILABLE = \"SET_IS_AVAILABLE\",\n  SET_ERROR = \"SET_ERROR\",\n}\n\nexport type GeoLocationActionT =\n  | {\n      type: GeoLocationActions.ADD_LOCALIZATION;\n      payload: GeoDataT;\n    }\n  | {\n      type: GeoLocationActions.CLEAR_DATA;\n      payload: undefined;\n    }\n  | {\n      type: GeoLocationActions.SET_TIME_INTERVAL;\n      payload: number;\n    }\n  | {\n      type: GeoLocationActions.SET_IS_TRACKING;\n      payload: boolean;\n    }\n  | {\n      type: GeoLocationActions.SET_ERROR;\n      payload: GeoErrorT | undefined;\n    };\n\nexport enum GeoLocationErrorMessages {\n  PERMISSION_DENIED = \"We are unable to get your current geolocation. If an error caused it, try allowing the browser to track your location.\",\n  POSITION_UNAVAILABLE = \"We are unable to get your current geolocation.If an error caused it, try turning on GPS in your device and getting closer to a window to try again\",\n  BROWSER_NO_SUPPORT = \"Your browser does not support Geolocation. Please update the browser or use a different one.\",\n  DEFAULT = \"An unexpected error occuried\",\n}\n","import React, { PureComponent } from \"react\";\nimport { Marker, MarkerProps } from \"react-map-gl\";\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\ninterface IPinProps extends MarkerProps {\n  color: string;\n  size: number;\n}\n\nexport default class Pin extends PureComponent<IPinProps> {\n  render() {\n    const { longitude, latitude, color, size } = this.props;\n\n    return (\n      <Marker longitude={longitude} latitude={latitude}>\n        <svg\n          height={size}\n          viewBox=\"0 0 24 24\"\n          style={{\n            cursor: \"pointer\",\n            fill: color,\n            stroke: \"none\",\n            transform: `translate(${-size / 2}px,${-size}px)`,\n          }}\n        >\n          <path d={ICON} />\n        </svg>\n      </Marker>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { GeoDataT } from \"../state/geoLocation/types\";\nimport Pin from \"./Pin\";\n\ntype PinsPropsT = {\n  data: GeoDataT[];\n};\n\nexport class Pins extends PureComponent<PinsPropsT> {\n  render() {\n    const { data } = this.props;\n    return data.map((item) => {\n      return (\n        <Pin\n          latitude={item.latitude}\n          longitude={item.longitude}\n          color={item.id === 0 ? \"red\" : \"blue\"}\n          size={25}\n          key={item.id}\n        />\n      );\n    });\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport ReactMapGL, { ViewportProps } from \"react-map-gl\";\nimport { GeoDataT } from \"../state/geoLocation/types\";\nimport { Pins } from \"../components/Pins\";\n\ntype PropsT = {\n  data: GeoDataT[];\n  initialLatitude: number;\n  initialLongitude: number;\n  zoom: number;\n  width: string;\n  height: string;\n};\n\ntype StateT = {\n  viewport: Partial<ViewportProps>;\n};\n\nclass MapContainer extends PureComponent<PropsT, StateT> {\n  state: Readonly<StateT> = {\n    viewport: {\n      latitude: this.props.initialLatitude,\n      longitude: this.props.initialLongitude,\n      zoom: this.props.zoom,\n    },\n  };\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        onViewportChange={(viewport) => this.setState({ viewport })}\n        mapboxApiAccessToken={\n          \"pk.eyJ1IjoibGV0b3V0IiwiYSI6ImNrOGxiamdxejAwbG4zZm83bHZ1aHVhNnkifQ.Pvz5iOHGNQt8uo9_ilavtA\"\n        }\n        width={width}\n        height={height}\n      >\n        <Pins data={this.props.data} />\n      </ReactMapGL>\n    );\n  }\n}\n\nexport default MapContainer;\n","import {\n  GeoLocationStateT,\n  GeoLocationActions,\n  GeoLocationActionT,\n} from \"./types\";\nimport { GeoDataT } from \"./types\";\n\nexport const initialGeoLocationState: GeoLocationStateT = {\n  data: [],\n  timeInterval: 5000,\n  isTracking: false,\n  error: undefined,\n};\n\nexport const createNextId = (data: GeoDataT[]) =>\n  data.length ? data[data.length - 1].id + 1 : 0;\n\nexport const geoLocationReducer = (\n  state = initialGeoLocationState,\n  action: GeoLocationActionT\n): GeoLocationStateT => {\n  switch (action.type) {\n    case GeoLocationActions.ADD_LOCALIZATION:\n      return {\n        ...state,\n        data: [\n          ...state.data,\n          { ...action.payload, id: createNextId(state.data) },\n        ],\n        error: undefined,\n        isTracking: true,\n      };\n    case GeoLocationActions.CLEAR_DATA:\n      return { ...state, data: [] };\n    case GeoLocationActions.SET_TIME_INTERVAL:\n      return { ...state, timeInterval: action.payload };\n    case GeoLocationActions.SET_IS_TRACKING:\n      return { ...state, isTracking: action.payload };\n    case GeoLocationActions.SET_ERROR:\n      return { ...state, error: action.payload, isTracking: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { GeoLocationErrorMessages } from \"../state/geoLocation/types\";\n\nconst withGeolocationAvailable = <P extends object>(\n  Component: React.ComponentType<P>\n): React.FC<P> => ({ ...props }) =>\n  \"geolocation\" in navigator ? (\n    <Component {...(props as P)} />\n  ) : (\n    <p>{GeoLocationErrorMessages.BROWSER_NO_SUPPORT}</p>\n  );\n\nexport default withGeolocationAvailable;\n","import React from \"react\";\nimport { isMobile, isTablet } from \"react-device-detect\";\n\nconst withOnlyMobileAndTablet = <P extends object>(\n  Component: React.ComponentType<P>\n): React.FC<P> => ({ ...props }) =>\n  isMobile || isTablet ? (\n    <Component {...(props as P)} />\n  ) : (\n    <p>App is only available on mobile and tablets.</p>\n  );\n\nexport default withOnlyMobileAndTablet;\n","import React, { PureComponent } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { format } from \"date-fns\";\n\ntype DataViewPropsT = {\n  title: string;\n  titleColor: string;\n  latitude: number;\n  longitude: number;\n  measurementTime: Date;\n};\n\nexport default class DataView extends PureComponent<DataViewPropsT> {\n  render() {\n    const {\n      title,\n      titleColor,\n      latitude,\n      longitude,\n      measurementTime,\n    } = this.props;\n    return (\n      <div className=\"vertical-spacing text-align-left\">\n        <Typography variant=\"body1\" component=\"p\" style={{ color: titleColor }}>\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          <b>Latitude:</b> {latitude}\n        </Typography>\n\n        <Typography variant=\"body2\" component=\"p\">\n          <b>Longitude</b>: {longitude}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          <b>Measurement time</b>{\" \"}\n          {format(measurementTime, \"HH:mm:ss dd-MM-yyyy\")}\n        </Typography>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n  DialogActions,\n} from \"@material-ui/core\";\n\ntype ErrorDialogPropsT = {\n  onClose: () => void;\n  title: string;\n  message: string;\n  open: boolean;\n};\n\nconst ErrorDialog: React.FC<ErrorDialogPropsT> = ({\n  onClose,\n  title,\n  message,\n  open,\n}) => {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <Typography variant=\"body2\" component=\"p\">\n          {message}\n        </Typography>\n      </DialogContent>\n      <DialogActions></DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ErrorDialog;\n","import React, { useEffect, useReducer, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  GeoLocationActions,\n  GeoLocationErrorMessages,\n  GeoDataT,\n} from \"./state/geoLocation/types\";\nimport MapContainer from \"./containers/MapContainer\";\nimport {\n  geoLocationReducer,\n  initialGeoLocationState,\n} from \"./state/geoLocation/reducer\";\nimport {\n  Switch,\n  FormGroup,\n  FormControlLabel,\n  Container,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport withGeolocationAvailable from \"./hoc/withGeolocationAvailable\";\nimport withOnlyMobileAndTablet from \"./hoc/withOnlyMobileAndTablet\";\nimport { useInterval } from \"./hooks/useInterval\";\nimport DataView from \"./components/DataView\";\nimport ErrorDialog from \"./components/ErrorDialog\";\n\nconst App: React.FC = () => {\n  const [geoLocation, dispatchGeoLocation] = useReducer(\n    geoLocationReducer,\n    initialGeoLocationState\n  );\n  const [rawDataView, toggleRawDataView] = useState<boolean>(false);\n\n  /**\n   * Get position every <geoLocation.timeInterval> ms\n   */\n  useInterval(\n    getCurrentPosition,\n    geoLocation.isTracking ? geoLocation.timeInterval : null\n  );\n\n  /**\n   * Start getting position as the app did mount\n   */\n  useEffect(() => {\n    getCurrentPosition();\n  }, []);\n\n  function getCurrentPosition() {\n    navigator.geolocation.getCurrentPosition(\n      onGeolocateSuccess,\n      onGeolocateError,\n      {\n        enableHighAccuracy: true,\n      }\n    );\n  }\n\n  function onGeolocateSuccess(position: Position) {\n    dispatchGeoLocation({\n      type: GeoLocationActions.ADD_LOCALIZATION,\n      payload: {\n        id: 0,\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        measurementTime: new Date(position.timestamp),\n      },\n    });\n  }\n\n  function onGeolocateError(error: PositionError) {\n    dispatchGeoLocation({\n      type: GeoLocationActions.SET_ERROR,\n      payload: {\n        measurementTime: new Date(),\n        message: getGeolocateErrorMessage(error),\n      },\n    });\n  }\n\n  function getGeolocateErrorMessage(error: PositionError) {\n    if (error.code === error.PERMISSION_DENIED) {\n      return GeoLocationErrorMessages.PERMISSION_DENIED;\n    } else if (error.code === error.POSITION_UNAVAILABLE) {\n      return GeoLocationErrorMessages.POSITION_UNAVAILABLE;\n    }\n    return GeoLocationErrorMessages.DEFAULT;\n  }\n\n  function createDataForPins(data: GeoDataT[]) {\n    if (data.length > 1) {\n      return [data[0], data[data.length - 1]];\n    } else if (data.length === 1) {\n      return [data[0]];\n    }\n    return data;\n  }\n\n  return (\n    <Container>\n      <Typography align=\"center\" variant=\"h5\" className=\"vertical-spacing\">\n        TrackMeNow\n      </Typography>\n      {geoLocation.data.length ? (\n        <>\n          <MapContainer\n            data={createDataForPins(geoLocation.data)}\n            initialLatitude={geoLocation.data[0].latitude}\n            initialLongitude={geoLocation.data[0].longitude}\n            zoom={16}\n            width=\"100%\"\n            height=\"500px\"\n          />\n          <FormGroup row className=\"vertical-spacing\">\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={geoLocation.isTracking}\n                  onChange={() => {\n                    dispatchGeoLocation({\n                      type: GeoLocationActions.SET_IS_TRACKING,\n                      payload: !geoLocation.isTracking,\n                    });\n                  }}\n                  name=\"Geolocalization Availability\"\n                  inputProps={{ \"aria-label\": \"primary switch\" }}\n                ></Switch>\n              }\n              label=\"On/Off track geolocation\"\n            />\n          </FormGroup>\n          <DataView\n            title=\"Starting position\"\n            titleColor=\"red\"\n            latitude={geoLocation.data[0].latitude}\n            longitude={geoLocation.data[0].longitude}\n            measurementTime={geoLocation.data[0].measurementTime}\n          />\n          <DataView\n            title=\"Current position\"\n            titleColor=\"blue\"\n            latitude={geoLocation.data[geoLocation.data.length - 1].latitude}\n            longitude={geoLocation.data[geoLocation.data.length - 1].longitude}\n            measurementTime={\n              geoLocation.data[geoLocation.data.length - 1].measurementTime\n            }\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => toggleRawDataView(!rawDataView)}\n          >\n            {rawDataView ? <>Hide raw data</> : <>Show raw data</>}\n          </Button>\n          <div className=\"vertical-spacing\">\n            {rawDataView ? (\n              <Typography style={{ overflowWrap: \"break-word\" }}>\n                {JSON.stringify(geoLocation.data)}\n              </Typography>\n            ) : null}\n          </div>\n        </>\n      ) : null}\n      <ErrorDialog\n        onClose={() =>\n          dispatchGeoLocation({\n            type: GeoLocationActions.SET_ERROR,\n            payload: undefined,\n          })\n        }\n        open={geoLocation.error ? true : false}\n        title=\"Error occuried.\"\n        message={geoLocation.error?.message!}\n      />\n    </Container>\n  );\n};\n\nexport default withOnlyMobileAndTablet(withGeolocationAvailable(App));\n","import { useEffect, useRef } from \"react\";\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}